# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
      - master
      - develop

  pull_request:
    branches:
      - main
      - master
      - develop

  workflow_dispatch:

concurrency:
  group: rmd-check
  cancel-in-progress: true

name: R-CMD-check

jobs:
  R-CMD-check:
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: windows-latest
            r: release
            rspm: ""
          - os: macOS-latest
            r: release
            rspm: ""
          - os: ubuntu-20.04
            r: release
            rspm: https://packagemanager.rstudio.com/cran/__linux__/focal/latest
          - os: ubuntu-20.04
            r: devel
            rspm: https://packagemanager.rstudio.com/cran/__linux__/focal/latest

    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RENV_PATHS_ROOT: ~/.local/share/renv
      TESTTHAT: false
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2.1.4
        id: cache-packages
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}-targets-v2
          restore-keys: |
            ${{ runner.os }}-renv-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install other dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgit2-dev libharfbuzz-dev libcurl4-openssl-dev \
          libfribidi-dev libzmq3-dev libmagick++-dev

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
          Rcpp::compileAttributes()
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "error", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
