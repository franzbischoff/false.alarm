# MIT License
# Copyright (c) 2021 Eli Lilly and Company
# Author: William Michael Landau (will.landau at gmail)
# Written with help from public domain (CC0 1.0 Universal) workflow files by Jim Hester:
# * https://github.com/r-lib/actions/blob/master/examples/check-full.yaml
# * https://github.com/r-lib/actions/blob/master/examples/blogdown.yaml
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: Targets

on:
  push:
    branches:
      - develop

  workflow_dispatch:
  repository_dispatch:

jobs:
  targets:
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, 'targets')"
    env:
      GITHUB_PAT: ${{ secrets.GITHUBPAT }}
      RENV_PATHS_ROOT: ~/.local/share/renv
    steps:
      - name: Checking out shallow repository
        uses: actions/checkout@v2

      - run: git branch

      - name: Install System dependencies
        run: |
          sudo apt-fast update
          sudo apt-fast install -y libgit2-dev libharfbuzz-dev libcurl4-openssl-dev \
          libfribidi-dev libzmq3-dev

      - name: Setting up R installation
        uses: r-lib/actions/setup-r@v1

      - name: Setting up pandoc and pandoc-citeproc
        uses: r-lib/actions/setup-pandoc@v1

      - name: Cache R packages
        uses: actions/cache@v2.1.4
        id: cache-packages
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}-targets-v2
          restore-keys: |
            ${{ runner.os }}-renv-

      - name: Install dependencies
        run: |
          if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
          Sys.unsetenv("GITHUB_PAT")
          renv::install(".")
          renv::restore()
        shell: Rscript {0}

      - name: Check if previous runs exist
        id: runs-exist
        run: git ls-remote --exit-code --heads origin targets-runs
        continue-on-error: true

      - name: Checking out shallow previous run
        if: steps.runs-exist.outcome == 'success'
        uses: actions/checkout@v2
        with:
          ref: targets-runs
          path: .targets-runs

      - name: Restore output files from the previous run
        if: steps.runs-exist.outcome == 'success'
        run: |
          for (dest in scan(".targets-runs/.targets-files", what = character())) {
            source <- file.path(".targets-runs", dest)
            if (!file.exists(dirname(dest))) dir.create(dirname(dest), recursive = TRUE)
            if (file.exists(source)) file.rename(source, dest)
          }
        shell: Rscript {0}

      - name: Run targets pipeline
        run: source('run.R')
        shell: Rscript {0}
        continue-on-error: true # if the pipeline fails, the workspace is saved for inspection.

      - name: Identify files that the targets pipeline produced
        id: check-new-files
        run: |
          git ls-files -mo -x renv -x inst -x src > .targets-files
          ([ -s .targets-files ] && echo "New files produced" && cat .targets-files && echo "::set-output name=newfiles::true") || (echo "Nothing to do" && echo "::set-output name=newfiles::false")

      - name: Update the current repository without the objects
        if: steps.check-new-files.outputs.newfiles == 'true'
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git add --all -- ':!renv'
          git commit -am "Update current branch"
          git push
        continue-on-error: true # if the pipeline fails, the workspace is saved for inspection.

      - name: Create the runs branch if it does not already exist
        if: steps.check-new-files.outputs.newfiles == 'true' && steps.runs-exist.outcome != 'success'
        run: git checkout --orphan targets-runs
        continue-on-error: true # if the pipeline fails, the workspace is saved for inspection.

      - name: Put the worktree in the runs branch if the latter already exists
        if: steps.check-new-files.outputs.newfiles == 'true' && steps.runs-exist.outcome == 'success'
        run: |
          rm -r .git
          mv .targets-runs/.git .
          rm -r .targets-runs
        continue-on-error: true # if the pipeline fails, the workspace is saved for inspection.

      - name: Upload latest run to the runs branch
        if: steps.check-new-files.outputs.newfiles == 'true'
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git add --all -- ':!renv'
          git add -f .targets-files
          git add -f _targets
          git commit -am "Run pipeline"
          git push origin targets-runs
        continue-on-error: true # if the pipeline fails, the workspace is saved for inspection.

