---
name: CI

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - develop

  workflow_dispatch:
  repository_dispatch:

jobs:

  lint:
    name: Apply lintr in all R and Rmd files
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RENV_PATHS_ROOT: ~/.local/share/renv
    steps:
      - name: Checking out shallow repository
        uses: actions/checkout@v2

      - run: git branch

      - name: Install System dependencies
        run: |
          sudo apt-fast update
          sudo apt-fast install -y libgit2-dev libharfbuzz-dev libcurl4-openssl-dev \
          libfribidi-dev libzmq3-dev

      - name: Setting up R installation
        uses: r-lib/actions/setup-r@v1

      - name: Cache R packages
        uses: actions/cache@v2.1.4
        id: cache-packages
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}-targets-v2
          restore-keys: |
            ${{ runner.os }}-renv-

      - name: Install dependencies
        run: |
          if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
          Sys.unsetenv("GITHUB_PAT")
          renv::restore()
        shell: Rscript {0}

      - name: Lint
        run: |
          for(i in c("analysis", "R", "review", "thesis", "output")) {
            lintr::lint_dir(i)
          }
        shell: Rscript {0}

  targets:
    name: Run targets pileline
    needs:
      - lint
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, 'targets')"
    env:
      GITHUB_PAT: ${{ secrets.GITHUBPAT }}
      RENV_PATHS_ROOT: ~/.local/share/renv
    steps:
      - name: Checking out shallow repository
        uses: actions/checkout@v2

      - run: git branch

      - name: Install System dependencies
        run: |
          sudo apt-fast update
          sudo apt-fast install -y libgit2-dev libharfbuzz-dev libcurl4-openssl-dev \
          libfribidi-dev libzmq3-dev

      - name: Setting up R installation
        uses: r-lib/actions/setup-r@v1

      - name: Setting up pandoc and pandoc-citeproc
        uses: r-lib/actions/setup-pandoc@v1

      - name: Cache R packages
        uses: actions/cache@v2.1.4
        id: cache-packages
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}-targets-v2
          restore-keys: |
            ${{ runner.os }}-renv-

      - name: Install dependencies
        run: |
          if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
          Sys.unsetenv("GITHUB_PAT")
          renv::install(".")
          renv::restore()
        shell: Rscript {0}

      - name: Check if previous runs exist
        id: runs-exist
        run: git ls-remote --exit-code --heads origin targets-runs
        continue-on-error: true

      - name: Checking out shallow previous run
        if: steps.runs-exist.outcome == 'success'
        uses: actions/checkout@v2
        with:
          ref: targets-runs
          path: .targets-runs

      - name: Restore output files from the previous run
        if: steps.runs-exist.outcome == 'success'
        run: |
          for (dest in scan(".targets-runs/.targets-files", what = character())) {
            source <- file.path(".targets-runs", dest)
            if (!file.exists(dirname(dest))) dir.create(dirname(dest), recursive = TRUE)
            if (file.exists(source)) file.rename(source, dest)
          }
        shell: Rscript {0}

      - name: Run targets pipeline
        run: source('run.R')
        shell: Rscript {0}
        continue-on-error: true # if the pipeline fails, the workspace is saved for inspection.

      - name: Identify files that the targets pipeline produced
        id: check-new-files
        run: |
          git ls-files -mo -x renv -x inst -x src > .targets-files

      - name: Update the current repository without the objects
        if: steps.check-new-files.outputs.newfiles == 'true'
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git add --all -- ':!renv'
          git commit -am "Update current branch"
          git push --quiet
        continue-on-error: true

      - name: Create the runs branch if it does not already exist
        if: steps.check-new-files.outputs.newfiles == 'true' && steps.runs-exist.outcome != 'success'
        run: git checkout --orphan targets-runs
        continue-on-error: true # if the pipeline fails, the workspace is saved for inspection.

      - name: Put the worktree in the runs branch if the latter already exists
        if: steps.check-new-files.outputs.newfiles == 'true' && steps.runs-exist.outcome == 'success'
        run: |
          rm -r .git
          mv .targets-runs/.git .
          rm -r .targets-runs
        continue-on-error: true # if the pipeline fails, the workspace is saved for inspection.

      - name: Upload latest run to the runs branch
        if: steps.check-new-files.outputs.newfiles == 'true'
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git add --all -- ':!renv'
          git add -f .targets-files
          git add -f _targets
          git commit -am "Run pipeline"
          git push origin targets-runs
        continue-on-error: true # if the pipeline fails, the workspace is saved for inspection.

  workflowr:
    name: Runs Workflowr versioning
    needs:
      - lint
      - targets
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'lint')"
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RENV_PATHS_ROOT: ~/.local/share/renv
    steps:
      - name: Checking out deep repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 ## all history
          ref: ${{ github.event.workflow_run.head_branch }}

      - run: git branch

      - run: echo ${{ github.event.head_commit.message }}

      - name: Install System dependencies
        run: |
          sudo apt-fast update
          sudo apt-fast install -y libgit2-dev libharfbuzz-dev libcurl4-openssl-dev \
          libfribidi-dev libzmq3-dev

      - name: Setting up R installation
        uses: r-lib/actions/setup-r@v1

      - name: Setting up pandoc and pandoc-citeproc
        uses: r-lib/actions/setup-pandoc@v1

      - name: Cache R packages
        uses: actions/cache@v2.1.4
        id: cache-packages
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}-targets-v2
          restore-keys: |
            ${{ runner.os }}-renv-

      - name: Install dependencies
        run: |
          if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
          Sys.unsetenv("GITHUB_PAT")
          renv::restore()
        shell: Rscript {0}

      - name: Configure git
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"

      - name: Knit thesisdown
        run: |
          bookdown::render_book("thesis")
        shell: Rscript {0}

      - name: Stage thesisdown changes
        run: |
          git add --all -- ':!renv'

      - name: Build workflowr that creates the commit
        run: workflowr::wflow_publish(all = TRUE, update = TRUE, verbose = TRUE)
        shell: Rscript {0}

      - name: Push changes
        run: |
          git push
