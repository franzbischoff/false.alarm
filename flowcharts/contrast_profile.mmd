---
title: Contrast Profile Classifier
---

%%{
  init: {
    "securityLevel": "loose",
    "theme": "dark",
    "fontFamily": "Fira Code Medium, Trebuchet MS, Verdana, Arial, Sans-Serif",
    "flowchart": {
      "diagramPadding": 10
    }
  }
}%%

classDiagram
%% <|-- Inheritance (is-a relationship)
%% ..>  Dependency (needs but not part of)
%% ..|> Realization (interface implementation)
%% *--  Composition (both live and die together)
%% o--  Aggregation (lifecycle is independent)
%% -->  Association (generic relationship, that may use cardinality)
%% --   Link (Solid) (Association without arrows)
%% ..   Link (Dashed) (Association without arrows and not navigable)

  Data "many * classes" <.. "1 * window_sizes" Contrast
  Contrast "1" <.. "1" Shapelet
  Shapelet "1" <.. "1" ShapeletMeta
  Data <.. ShapeletMeta
%%  Shapelet "1..window_sizes" *-- "1" PanContrast_TopK
%%  Contrast "1..window_sizes" *-- "1" PanContrast_TopK

%%  class PanContrast_TopK {
%%    Contrast contrasts
%%    Shapelet shapelets
%%  }


  class Data {
    List~Factor~ classes
    List~Numeric~ ts
    List~int~ ids
  }


  %% class is the positive class
  class Contrast {
    List~int~ window_sizes*
    Factor class*
    List~Numeric~ contrast_profiles
  }

  class Shapelet {
    List~int~ window_sizes*
    Factor class*
    List~Numeric~ platos
    List~int~ platos_indices
    List~Numeric~ platos_twin
    List~int~ platos_twin_indices
    List~float~ plato_nary_contrasts
  }

  %% all Lists have dim m,n where m == num_of_shapelets(k) and n == length(window_sizes)
  %% except coverages that has dim(m) where m == length(window_sizes) and each element has
  %% dim(m,n) where m == num_of_shapelets(k) and n == num_segments
  %% TODO: this need to be reshaped
  %% TODO: num_segments reflect the number of positive samples
  class ShapeletMeta {
    List~int~ window_sizes*
    Factor class*
    List~Numeric~ thresholds
    List~Numeric~ overall_contrasts
    List~bool~ coverages
    List~int~ coverages_counts
    int num_segments
  }

  ShapeletMeta *-- Fitted
  Fitted *-- Model
  Terms *-- Model
  ShapeletMeta <-- Terms : optimizes

  class Fitted {
    Factor class*
    ShapeletMeta best_shapelets
    List~Numeric~ platos
    List~Numeric~ thresholds
  }

  class Terms {
  float contrast_total
  float contrast_median
  float contrast_mean
  fload contrast_std
  fload cov_con_ratio_mean
  float k_mean
  float cov_mean
  fload coverage
  fload cov_percent
    int redundancy
    int num_shapelets
  }

  class Model {
    Fitted fitted_values
    Terms terms
  }
